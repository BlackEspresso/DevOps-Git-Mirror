name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: DevOpsGitMirror

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        shell: pwsh
        run: |
          if(Test-Path docker-compose.test.yml){
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          }
          else{
            docker build . --file Dockerfile
          }

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: windows-2019
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        shell: pwsh
        run: |
          $IMAGE_ID=docker.pkg.github.com/${env:github.repository}/${env:IMAGE_NAME}
          # Change all uppercase to lowercase
          $IMAGE_ID=$IMAGE_ID.ToLower()

          # Strip git ref prefix from version
          $VERSION="${env:github.ref}"
          

          # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
